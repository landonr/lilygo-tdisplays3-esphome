esphome:
  name: tdisplay-poc
  friendly_name: tdisplay-poc

  on_boot: 
    - priority: 800
      then:
        - lambda: |-
            id(disp).tft.setRotation(3);
            setup_t tftSetup;
            id(disp).tft.getSetup(tftSetup);            
            id(TFT_eSPI_Version).publish_state(tftSetup.version.c_str());
            id(TFT_eSPI_Width).publish_state(tftSetup.tft_width);
            id(TFT_eSPI_Height).publish_state(tftSetup.tft_height);

            int iTFTDriver = tftSetup.tft_driver;
            id(TFT_eSPI_Driver).publish_state(((String)iTFTDriver).c_str());
            if(tftSetup.serial == 1) {
              id(TFT_eSPI_Interface).publish_state("Serial");
            }
            else {
              id(TFT_eSPI_Interface).publish_state("8-bit Parallel");
            }

  platformio_options:
    upload_speed: 921600
    build_flags:
      # The folowing defines will configure the TFT display driver, size and pins
      - -DUSER_SETUP_LOADED=1 
      - -DST7789_DRIVER=1 
      - -DINIT_SEQUENCE_3=1 
      - -DCGRAM_OFFSET
      - -DTFT_RGB_ORDER=TFT_RGB 
      - -DTFT_INVERSION_ON=1 
      - -DTFT_PARALLEL_8_BIT=1 
      - -DTFT_WIDTH=170 
      - -DTFT_HEIGHT=320 
      - -DTFT_DC=7 
      - -DTFT_RST=5 
      - -DTFT_WR=8 
      - -DTFT_RD=9 
      - -DTFT_D0=39 
      - -DTFT_D1=40 
      - -DTFT_D2=41 
      - -DTFT_D3=42 
      - -DTFT_D4=45 
      - -DTFT_D5=46 
      - -DTFT_D6=47 
      - -DTFT_D7=48 
      - -DLOAD_GLCD=1
      - -DLOAD_FONT2=1 
      - -DLOAD_FONT4=1 
      - -DLOAD_FONT6=1 
      - -DLOAD_FONT7=1 
      - -DLOAD_FONT8=1 
      - -DLOAD_GFXFF=1 
      - -DSMOOTH_FONT=1
      # If you don't care about control of the backlight you can uncomment the two lines below
      # - -DTFT_BL=38
      # - -DTFT_BACKLIGHT_ON=HIGH

external_components:
  - source:
      type: git
      url: https://github.com/bradmck/lilygo-tdisplays3-esphome.git
      ref: main
    components: [tdisplays3]

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:
  password: "6ada29f6f41ce1685d29d406efd25fa4"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "tdisplay-poc Fallback Hotspot"
    password: "zQ9tuPKIfFMu"

web_server:

time:
  - platform: homeassistant
    id: ha_time

output:
  - platform: ledc
    pin: GPIO38
    id: gpio38
    frequency: 2000

light:
  - platform: monochromatic
    output: gpio38
    name: "Backlight"
    restore_mode: RESTORE_DEFAULT_ON

text_sensor:
  - platform: template
    name: "TFT_eSPI Version"
    id: TFT_eSPI_Version
    entity_category: diagnostic
  - platform: template
    name: "TFT_eSPI Interface"
    id: TFT_eSPI_Interface
    entity_category: diagnostic
  - platform: template
    name: "TFT_eSPI Driver"
    id: TFT_eSPI_Driver
    entity_category: diagnostic

sensor:
  - platform: template
    name: "TFT_eSPI Width"
    id: TFT_eSPI_Width
    entity_category: diagnostic
  - platform: template
    name: "TFT_eSPI Height"
    id: TFT_eSPI_Height
    entity_category: diagnostic


font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 30

display:
  - platform: tdisplays3
    id: disp
    update_interval: 1s
    #rotation: 270    # Don't set the rotation here, use the TFT_eSPI function (check if there's a way to use a build option for this)
    lambda: |-
      // Set a white background - this draws to the sprite the main component uses
      id(disp).spr.fillSprite(TFT_WHITE);

      int rssicolor;
      // Draw the gauge
      int rssi=random(-100, -60);
      if (rssi < -100) {
        rssicolor=TFT_RED;
      }
      else if (rssi < -90) {
        rssicolor=TFT_ORANGE;
      }
      else if (rssi < -80) {
        rssicolor=TFT_YELLOW;
      }
      else {
        rssicolor=TFT_GREEN;
      }

      int gaugeangle = map(rssi, -150, -40, 30, 330);
      TFT_eSprite sprArc = TFT_eSprite(&id(disp).spr);
      sprArc.createSprite(140, 140);
      sprArc.fillSprite(TFT_PINK);
      sprArc.fillSmoothCircle(sprArc.width() / 2, sprArc.height() / 2, sprArc.width() / 2, TFT_BLACK, TFT_BLACK);
      sprArc.drawSmoothArc(sprArc.width() / 2, sprArc.width() / 2, sprArc.height() / 2, 50, 30, 330, TFT_DARKGREY, TFT_DARKGREY);
      sprArc.drawSmoothArc(sprArc.width() / 2, sprArc.width() / 2, sprArc.height() / 2, 50, 30, gaugeangle, rssicolor, TFT_LIGHTGREY);

      // Draw the gauge value label in the center - this sprite is the same size as the gauge itself to allow for easy text centering
      TFT_eSprite sprArcValue = TFT_eSprite(&id(disp).spr);
      sprArcValue.createSprite(140, 140);
      sprArcValue.setTextDatum(MC_DATUM);
      // Fill the text sprite with Pink, and use Pink for text background.  This will get filtered out late
      sprArcValue.fillSprite(TFT_PINK);
      sprArcValue.setTextColor(TFT_WHITE, TFT_PINK);
      sprArcValue.drawNumber(rssi, sprArc.height() / 2, sprArc.height() / 2, 6);

      // Push the gauge to the background sprite and filter out the Black background
      sprArc.pushToSprite(&id(disp).spr, (id(disp).spr.width() / 2) - (sprArc.width() / 2) , 5, TFT_PINK);  //, TFT_BLACK);
      // Push the label to the background sprite and filter out the Pink background
      sprArcValue.pushToSprite(&id(disp).spr, (id(disp).spr.width() / 2) - (sprArc.width() / 2) , 5, TFT_PINK);

      // Original clock using traditinal ESPHome ESPHome Display functions
      it.printf(20, 140, id(roboto), Color(255, 0, 0), id(ha_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str());

